#=======================================================
#=======================================================
#=======================================================
Dockerized Email Knowledge Graph Pipeline
#=======================================================
#=======================================================
#=======================================================
Overview
This project uses Docker and Python to build an isolated, reproducible pipeline**:**

1) Neo4j (Graph Database) to store and query email entities and relationships.

2) Email Ingest Service (Python) to parse exported emails (.eml or JSON) and load them into Neo4j.

3) AI GUI App (ai_chat_gui.py) containerized for local analysis, capable of querying Neo4j or loading data for AI-driven insights.

We then use a host script (graph_builder.py) to run Cypher queries and extract subgraphs, feeding those results back into AI functions as needed.

#=======================================================
#=======================================================
#=======================================================
Requirements & System Setup

1) Docker & Docker Compose installed on your machine:

   1a) Docker: https://docs.docker.com/get-docker/
   1b) Docker Compose: https://docs.docker.com/compose/install/

2) Python 3.11+ on host (for running graph_builder.py).

3) Python libraries (list in each service):

   3a) Ingest Service: neo4j-driver, python-dotenv
   3b) GUI App: openai, tk (built-in but ensure python3-tk package), reportlab, neo4j-driver
#=======================================================
#=======================================================
#=======================================================
Directory Structure (project-root/)
project-root/
│
├── docker-compose.yml            # Orchestrates all services
│
├── neo4j/                        # Optional customization of Neo4j
│   └── Dockerfile                # (FILE) Custom Neo4j image or config
│
├── ingest/                       # Email ingestion service
│   ├── Dockerfile                # (FILE) Builds the ingest container
│   ├── requirements.txt          # (FILE) Python dependencies for ingest
│   └── email_ingest.py           # (FILE) Python script to parse emails & load Neo4j
│
├── gui/                          # AI GUI application
│   ├── Dockerfile                # (FILE) Builds the GUI container
│   ├── requirements.txt          # (FILE) Python dependencies for GUI
│   └── ai_chat_gui.py            # (FILE) Tkinter-based AI interface
│
└── graph_builder.py              # (FILE) Host Python script to query Neo4j via bolt


#=======================================================
#=======================================================
#=======================================================

File Details
********************************************
docker-compose.yml (YAML): Orchestrates the three services. Must live at project root.

neo4j/ folder: Place any custom Neo4j configuration or plugins; neo4j/Dockerfile overrides the base image.
********************************************
********************************************
********************************************
- ingest/ folder:
--- Dockerfile: No extension; defines the container build for ingestion.

--- requirements.txt: Plain text listing neo4j-driver and python-dotenv (one per line).

--- email_ingest.py: Python script that reads files from emails/ (you must create this folder alongside ingest/), parses content, and loads nodes/relationships into Neo4j.
********************************************
********************************************
********************************************
- gui/ folder:

--- Dockerfile: No extension; defines the GUI container build.

--- requirements.txt: Plain text listing openai, reportlab, neo4j-driver, and any other Python libs your GUI needs.

--- ai_chat_gui.py: The complete Tkinter application script.

********************************************
graph_builder.py: A standalone Python script (runs on host) that connects to Neo4j over Bolt and executes Cypher queries.

#=======================================================
#=======================================================
#=======================================================


#=======================================================
#=======================================================
#=======================================================


#=======================================================
#=======================================================
#=======================================================


#=======================================================
#=======================================================
#=======================================================


#=======================================================
#=======================================================
#=======================================================